repositories {
    jcenter()
}

apply plugin: 'net.ltgt.errorprone'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'com.github.kt3k.coveralls'

tasks.withType(JavaCompile) {
    // Show all warnings except boot classpath
    configure(options) {
        compilerArgs << '-Xlint:all'        // Turn on all warnings
        compilerArgs << '-Xlint:-options'   // Turn off 'missing' bootclasspath warning
        compilerArgs << '-Werror'           // Turn warnings into errors
        compilerArgs << '-Xdiags:verbose'   // Turn on verbose errors
        deprecation = true
        encoding = 'UTF-8'
        // incremental = true // https://code.google.com/p/android/issues/detail?id=82411
    }
}

tasks.withType(Test) {
    testLogging {
        exceptionFormat 'full'
        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams true
    }
}

tasks.withType(JavaForkOptions) {
    // Prevent forked processes from stealing focus (on MacOS at least)
    jvmArgs '-Djava.awt.headless=true'
}

tasks.withType(Javadoc) {
    configure(options) {
        header = name
        author = true
        links(['http://docs.oracle.com/javase/8/docs/api/',
               'http://docs.oracle.com/javase/7/docs/api/'] as String[])
        linksOffline 'http://d.android.com/reference', "${android.sdkDirectory}/docs/reference"
        exclude '**/BuildConfig.java', '**/R.java'
        if (JavaVersion.current().isJava8Compatible()) {
            addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

// Only allows specifying of a single file
coveralls {
    jacocoReportPath = "${buildDir}/reports/jacoco/jacocoDebugReport/jacocoDebugReport.xml"
}

apply plugin: 'pmd'
apply plugin: 'jacoco'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'

android {
    compileSdkVersion 23
    buildToolsVersion '23.0.2'

    defaultConfig {
        minSdkVersion 11 // 14
        targetSdkVersion 23
        // Espresso test runner
        testInstrumentationRunner 'android.support.test.runner.AndroidJUnitRunner'
    }

    // Use the "ndk-build" tool to build libs
    sourceSets.main {
        jni.srcDirs = []
        jniLibs.srcDir 'src/main/libs'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    dexOptions {
        preDexLibraries project.hasProperty('debug')
        incremental project.hasProperty('debug')
    }

    packagingOptions {
        exclude '.readme'
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/dependencies'
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/license'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/notice'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/.readme'
        exclude 'META-INF/readme.txt'
        exclude 'META-INF/README.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor' // Butterknife
    }

    testOptions.unitTests.all {
        jvmArgs '-noverify' // Flurry SDK
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        checkAllWarnings true
        warningsAsErrors true
        disable 'PrivateResource',              // App Compat resources - actionBarSize/colorPrimary
                'UnusedResources',              // Unused will be removed on release
                'IconExpectedSize',             // Using the material icons provided from Google
                'SelectableText',               // Unless design wants selectable text
                'GoogleAppIndexingWarning',
                'GoogleAppIndexingApiWarning',  // We might want to index our app later
                'InvalidPackage',                // Butterknife, Okio and Realm throw this warning
                'AllowBackup',
                'UnusedIds'
    }

    (android.hasProperty('applicationVariants')
            ? android.'applicationVariants'
            : android.'libraryVariants').all { variant ->

        def variantName = variant.name.capitalize()
        def autoGenerated = ['**/R.class',
                             '**/R$*.class',
                             '**/Manifest*.*',
                             'android/**/*.*',
                             '**/BuildConfig.*',
                             '**/*$ViewBinder*.*',
                             '**/*$ViewInjector*.*']

        // Run lint on each build
        variant.assemble.dependsOn "lint$variantName"

        task("pmd$variantName", type: Pmd, dependsOn: "assemble$variantName") {
            group 'Reporting'
            description "Generate ${variantName} Pmd reports."

            ignoreFailures = true
            reports {
                xml.enabled = true
                html.enabled = true
            }

            source = files(variant.javaCompiler.source)
            classpath = files(configurations.compile.files)
        }

        task("jacoco${variantName}Report", type: JacocoReport,
                dependsOn: "test${variantName}UnitTest") {
            group 'Reporting'
            description "Generate ${variantName} Jacoco coverage reports."

            reports {
                xml.enabled = true
                html.enabled = true
            }

            // variant.javaCompile.source does not work
            // traverses from starting point
            sourceDirectories = files(android.sourceSets.main.java.srcDirs)
            executionData = files("${buildDir}/jacoco/test${variantName}UnitTest.exec")
            classDirectories = fileTree(dir: variant.javaCompiler.destinationDir,
                    excludes: autoGenerated)
        }

        task("findbugs$variantName", type: FindBugs, dependsOn: "assemble$variantName") {
            group 'Reporting'
            description "Generate ${variantName} Findbugs reports."

            ignoreFailures = true
            reports {
                xml.enabled = false
                html.enabled = true
            }

            effort = 'max'
            reportLevel = 'low'
            source = files(variant.javaCompiler.source)
            classpath = files(configurations.compile.files)
            classes = fileTree(dir: variant.javaCompile.destinationDir,
                    excludes: autoGenerated)
        }

        task("checkstyle$variantName", type: Checkstyle, dependsOn: "assemble$variantName") {
            group 'Reporting'
            description "Generate ${variantName} Checkstyle reports."

            ignoreFailures = true
            // TODO generate HTML, 'reports.html' is not available
            reports.xml.enabled = true

            configFile = rootProject.file('gradle/checkstyle-hard.xml')
            source = files(android.sourceSets.main.java.srcDirs)
            classpath = files(configurations.compile.files)
        }
    }
}

// Access configurations included by the plugins
dependencies {
    androidJacocoAgent 'org.jacoco:org.jacoco.agent:0.7.2.201409121644' // https://github.com/jacoco/jacoco/issues/288
    androidJacocoAnt 'org.jacoco:org.jacoco.agent:0.7.2.201409121644' // https://github.com/jacoco/jacoco/issues/288
    checkstyle 'com.puppycrawl.tools:checkstyle:6.14.1'
    errorprone 'com.google.errorprone:error_prone_core:2.0.7'
    findbugs 'com.google.code.findbugs:findbugs:3.0.1'
    jacocoAgent 'org.jacoco:org.jacoco.agent:0.7.2.201409121644' // https://github.com/jacoco/jacoco/issues/288
    jacocoAnt 'org.jacoco:org.jacoco.ant:0.7.2.201409121644' // https://github.com/jacoco/jacoco/issues/288
    pmd 'net.sourceforge.pmd:pmd-java:5.4.1'
}
